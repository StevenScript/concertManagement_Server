name: Concert Server CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest
    env:
      # Pull in your cosign key (base64-encoded) if provided
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      # AWS credentials/secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    services:
      db:
        image: mysql:8.3
        env:
          MYSQL_DATABASE: concertdb
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: concert
          MYSQL_PASSWORD: concertpass
        options: >-
          --health-cmd="mysqladmin ping -h localhost -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # ───────────────────────────────────────────────────────────────
      # 1) AWS CLI Configuration
      #    This step ensures subsequent "aws" or "eb" commands can authenticate.
      # ───────────────────────────────────────────────────────────────
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ───────────────────────────────────────────────────────────────
      # 2) Check out the backend code
      # ───────────────────────────────────────────────────────────────
      - name: Check out backend
        uses: actions/checkout@v3

      # ───────────────────────────────────────────────────────────────
      # 3) Set up JDK 17 for building the Spring Boot application
      # ───────────────────────────────────────────────────────────────
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # ───────────────────────────────────────────────────────────────
      # 4) Cache and build with Maven
      # ───────────────────────────────────────────────────────────────
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build & verify with Maven
        run: mvn clean verify --batch-mode

      # ───────────────────────────────────────────────────────────────
      # 5) Build the backend Docker image
      # ───────────────────────────────────────────────────────────────
      - name: Build backend Docker image
        run: |
          docker build \
            --build-arg GIT_SHA=${{ github.sha }} \
            -t concert-management-server:${{ github.sha }} \
            .


      # ───────────────────────────────────────────────────────────────
      # 6) Install Cosign and (optionally) restore & use your private key
      # ───────────────────────────────────────────────────────────────
      - name: Install cosign
        run: |
          wget https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -O cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

      - name: Restore Cosign private key
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        run: |
          echo "$COSIGN_PRIVATE_KEY" | base64 -d > cosign.key
          chmod 600 cosign.key

      - name: Sign Docker image
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        run: |
          cosign sign \
            --key cosign.key \
            concert-management-server:${{ github.sha }}

      # ───────────────────────────────────────────────────────────────
      # 7) Stand up your Docker Compose stack briefly & health-check it
      # ───────────────────────────────────────────────────────────────
      - name: Bring up stack & health check
        run: |
          docker compose up -d --build
          sleep 30
          docker compose logs backend
          curl -f http://localhost:8080/actuator/health

      - name: Tear down
        if: always()
        run: docker compose down

  audit-and-build-frontend:
    name: Frontend Audit & Build
    runs-on: ubuntu-latest
    needs: build-and-test-backend

    steps:
      - name: Check out frontend
        uses: actions/checkout@v3
        with:
          repository: StevenScript/concert-management-frontend
          path: frontend
          token: ${{ secrets.FRONTEND_PAT }}

      - name: Use Node.js 20 and cache deps
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci --omit=dev

      - name: Audit dependencies (fail only on critical)
        working-directory: frontend
        run: npm audit --audit-level=critical

      - name: Build frontend
        working-directory: frontend
        env:
          CI: false   # so that CRA/React won’t treat warnings as errors
        run: npm run build
