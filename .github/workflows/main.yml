name: Concert Server CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.3
        env:
          MYSQL_DATABASE: concertdb
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: concert
          MYSQL_PASSWORD: concertpass
        options: >-
          --health-cmd="mysqladmin ping -h localhost -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out backend
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build & verify with Maven
        run: mvn clean verify --batch-mode

      - name: Build backend Docker image (local)
        run: |
          docker build -t concert-management-server:test .

      - name: Bring up Docker Compose & Health Check
        run: |
          docker compose up -d --build
          sleep 40
          docker ps
          docker logs concert-backend
          docker exec concert-backend curl -f http://localhost:8080/actuator/health
      

      - name: Tear down
        if: always()
        run: docker compose down

  audit-and-build-frontend:
    name: Frontend Audit & Build
    runs-on: ubuntu-latest
    needs: build-and-test-backend

    steps:
      - name: Check out frontend
        uses: actions/checkout@v3
        with:
          repository: StevenScript/concert-management-frontend
          path: frontend
          token: ${{ secrets.FRONTEND_PAT }}

      - name: Use Node.js 20 and cache deps
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci --omit=dev

      - name: Audit dependencies (fail only on critical)
        working-directory: frontend
        run: npm audit --audit-level=critical

      - name: Build frontend
        working-directory: frontend
        env:
          CI: false
        run: npm run build
